//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.1
//     from Assets/ControllerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @ControllerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControllerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControllerControls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""cb1108cf-1694-4933-8175-a1b71fd0dbfd"",
            ""actions"": [
                {
                    ""name"": ""leftsectrigger"",
                    ""type"": ""Button"",
                    ""id"": ""d26b1253-748e-40b7-a666-bea1615b7dba"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""rightsectrigger"",
                    ""type"": ""Button"",
                    ""id"": ""85fb0dbb-6451-4859-9850-16fbba3775e3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GrabLeft"",
                    ""type"": ""Button"",
                    ""id"": ""a01bbd19-d2c0-41d1-a88b-0da31405d220"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GrabRight"",
                    ""type"": ""Button"",
                    ""id"": ""89821d71-94b4-423e-9fc4-492e2ad1808a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""leftTriggerHeld"",
                    ""type"": ""Value"",
                    ""id"": ""c9161147-997c-4773-b994-0d31ee7db199"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""rightTriggerHeld"",
                    ""type"": ""Value"",
                    ""id"": ""f0520cf0-cdc7-433c-add4-2a86b911870c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a7c614d7-25c2-4faf-8d1c-626a228bc1b9"",
                    ""path"": ""<XRController>{LeftHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""leftsectrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""065397cd-b371-4fe4-9bad-1318fa8a15b7"",
                    ""path"": ""<XRController>{RightHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rightsectrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6891cec-d7d0-424b-9670-8d867ad24621"",
                    ""path"": ""<XRController>{LeftHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GrabLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""056a7bcd-6511-40ee-80e7-ac5517581bc5"",
                    ""path"": ""<XRController>{RightHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GrabRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6c8133c-c1dd-4bed-b8b9-8669120096fd"",
                    ""path"": ""<XRController>{LeftHand}/{Trigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""leftTriggerHeld"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d868322a-7f46-4f77-b1b2-4d7ee9c0f7c3"",
                    ""path"": ""<XRController>{RightHand}/{Trigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rightTriggerHeld"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_leftsectrigger = m_Gameplay.FindAction("leftsectrigger", throwIfNotFound: true);
        m_Gameplay_rightsectrigger = m_Gameplay.FindAction("rightsectrigger", throwIfNotFound: true);
        m_Gameplay_GrabLeft = m_Gameplay.FindAction("GrabLeft", throwIfNotFound: true);
        m_Gameplay_GrabRight = m_Gameplay.FindAction("GrabRight", throwIfNotFound: true);
        m_Gameplay_leftTriggerHeld = m_Gameplay.FindAction("leftTriggerHeld", throwIfNotFound: true);
        m_Gameplay_rightTriggerHeld = m_Gameplay.FindAction("rightTriggerHeld", throwIfNotFound: true);
    }

    ~@ControllerControls()
    {
        Debug.Assert(!m_Gameplay.enabled, "This will cause a leak and performance issues, ControllerControls.Gameplay.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_leftsectrigger;
    private readonly InputAction m_Gameplay_rightsectrigger;
    private readonly InputAction m_Gameplay_GrabLeft;
    private readonly InputAction m_Gameplay_GrabRight;
    private readonly InputAction m_Gameplay_leftTriggerHeld;
    private readonly InputAction m_Gameplay_rightTriggerHeld;
    public struct GameplayActions
    {
        private @ControllerControls m_Wrapper;
        public GameplayActions(@ControllerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @leftsectrigger => m_Wrapper.m_Gameplay_leftsectrigger;
        public InputAction @rightsectrigger => m_Wrapper.m_Gameplay_rightsectrigger;
        public InputAction @GrabLeft => m_Wrapper.m_Gameplay_GrabLeft;
        public InputAction @GrabRight => m_Wrapper.m_Gameplay_GrabRight;
        public InputAction @leftTriggerHeld => m_Wrapper.m_Gameplay_leftTriggerHeld;
        public InputAction @rightTriggerHeld => m_Wrapper.m_Gameplay_rightTriggerHeld;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @leftsectrigger.started += instance.OnLeftsectrigger;
            @leftsectrigger.performed += instance.OnLeftsectrigger;
            @leftsectrigger.canceled += instance.OnLeftsectrigger;
            @rightsectrigger.started += instance.OnRightsectrigger;
            @rightsectrigger.performed += instance.OnRightsectrigger;
            @rightsectrigger.canceled += instance.OnRightsectrigger;
            @GrabLeft.started += instance.OnGrabLeft;
            @GrabLeft.performed += instance.OnGrabLeft;
            @GrabLeft.canceled += instance.OnGrabLeft;
            @GrabRight.started += instance.OnGrabRight;
            @GrabRight.performed += instance.OnGrabRight;
            @GrabRight.canceled += instance.OnGrabRight;
            @leftTriggerHeld.started += instance.OnLeftTriggerHeld;
            @leftTriggerHeld.performed += instance.OnLeftTriggerHeld;
            @leftTriggerHeld.canceled += instance.OnLeftTriggerHeld;
            @rightTriggerHeld.started += instance.OnRightTriggerHeld;
            @rightTriggerHeld.performed += instance.OnRightTriggerHeld;
            @rightTriggerHeld.canceled += instance.OnRightTriggerHeld;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @leftsectrigger.started -= instance.OnLeftsectrigger;
            @leftsectrigger.performed -= instance.OnLeftsectrigger;
            @leftsectrigger.canceled -= instance.OnLeftsectrigger;
            @rightsectrigger.started -= instance.OnRightsectrigger;
            @rightsectrigger.performed -= instance.OnRightsectrigger;
            @rightsectrigger.canceled -= instance.OnRightsectrigger;
            @GrabLeft.started -= instance.OnGrabLeft;
            @GrabLeft.performed -= instance.OnGrabLeft;
            @GrabLeft.canceled -= instance.OnGrabLeft;
            @GrabRight.started -= instance.OnGrabRight;
            @GrabRight.performed -= instance.OnGrabRight;
            @GrabRight.canceled -= instance.OnGrabRight;
            @leftTriggerHeld.started -= instance.OnLeftTriggerHeld;
            @leftTriggerHeld.performed -= instance.OnLeftTriggerHeld;
            @leftTriggerHeld.canceled -= instance.OnLeftTriggerHeld;
            @rightTriggerHeld.started -= instance.OnRightTriggerHeld;
            @rightTriggerHeld.performed -= instance.OnRightTriggerHeld;
            @rightTriggerHeld.canceled -= instance.OnRightTriggerHeld;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnLeftsectrigger(InputAction.CallbackContext context);
        void OnRightsectrigger(InputAction.CallbackContext context);
        void OnGrabLeft(InputAction.CallbackContext context);
        void OnGrabRight(InputAction.CallbackContext context);
        void OnLeftTriggerHeld(InputAction.CallbackContext context);
        void OnRightTriggerHeld(InputAction.CallbackContext context);
    }
}
